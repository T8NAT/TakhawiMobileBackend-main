import { Prisma } from '@prisma/client';
import { IBasicTripService } from '../interfaces/basicTripService';
import { BasicTripQueryType, CalculateTripPrice, CancelBasicTrip, CreateBasicTrip, JoinBasicTrip, JoinBasicTripType, TripBillingDetails, TripPrice } from '../types/basicTripType';
import { Language } from '../types/languageType';
import { DriverCancelationReturn, EndTrip, UserCancelationReturn } from '../types/tripType';
declare class BasicTripService implements IBasicTripService {
    applepayJoin(transactionId: string): Promise<{
        id: number;
        trip_id: number;
        passenger_id: number;
        payment_status: string;
        payment_method: string;
        app_share_discount: number;
        user_app_share: number;
        user_debt: number;
        user_tax: number;
        discount: number;
        driver_app_share: number;
        status: string;
        promo_code_id: number | null;
        createdAt: Date;
        updatedAt: Date;
        transactionId: string | null;
    }>;
    create(data: CreateBasicTrip, driver_id: number, gender: string): Promise<any>;
    get(tripId: number, userId: number): Promise<any>;
    getAll(userId: number, language: Language, gender: string, queryString: BasicTripQueryType): Promise<any>;
    join(data: JoinBasicTripType, tripPriceBreakdown: TripBillingDetails): Promise<JoinBasicTrip>;
    cancelByDriver(data: CancelBasicTrip): Promise<DriverCancelationReturn | undefined>;
    cancelByPassenger(data: CancelBasicTrip): Promise<UserCancelationReturn | undefined>;
    endTrip(tripId: number, driverId: number): Promise<EndTrip>;
    calculateTripPrice(data: CalculateTripPrice): Promise<TripPrice>;
    private applyPassengerPenalty;
    getTripById(id: number): Promise<{
        Basic_Trip: {
            price_per_seat: number;
            Passengers: ({
                Passnger: {
                    id: number;
                    uuid: string;
                    name: string;
                    phone: string;
                    email: string;
                    password: string;
                    role: string;
                    avatar: string | null;
                    birth_date: Date | null;
                    bio: string | null;
                    national_id: string | null;
                    gender: string;
                    online_status: string;
                    user_wallet_balance: number;
                    driver_wallet_balance: number;
                    profile_complted: number;
                    passenger_cancel_count: number;
                    driver_cancel_count: number;
                    location: Prisma.JsonValue;
                    prefered_language: string;
                    phone_verified: boolean;
                    driver_status: string;
                    passenger_status: string;
                    wasl_registration_status: string;
                    switch_to_driver: boolean;
                    is_blocked: boolean;
                    discount_app_share_count: number;
                    createdAt: Date;
                    updatedAt: Date;
                    deletedAt: Date | null;
                    passenger_rate: number;
                    driver_rate: number;
                    cityId: number | null;
                };
            } & {
                id: number;
                trip_id: number;
                passenger_id: number;
                payment_status: string;
                payment_method: string;
                app_share_discount: number;
                user_app_share: number;
                user_debt: number;
                user_tax: number;
                discount: number;
                driver_app_share: number;
                status: string;
                promo_code_id: number | null;
                createdAt: Date;
                updatedAt: Date;
                transactionId: string | null;
            })[];
        } | null;
    } & {
        id: number;
        start_date: Date;
        end_date: Date | null;
        pickup_time: Date | null;
        status: string;
        price: number;
        discount: number;
        driver_app_share: number;
        user_app_share: number;
        user_debt: number;
        user_tax: number;
        driver_tax: number;
        gender: string;
        type: string;
        distance: number;
        createdAt: Date;
        updatedAt: Date;
        deletedAt: Date | null;
        features: string[];
        driver_id: number | null;
        vehicle_id: number | null;
    }>;
    private applyDriverCompensation;
    private updateAppShareCount;
    private processPassengerRefund;
    private cancelPassengerTrip;
    private processPassengerRefunds;
    private applyDriverPenalty;
    private cancelTripAndUpdatePassengerStatus;
    private verifyDestinationAndPickupLocationsExist;
    checkWalletValidity(amount: number, userId: number, trip_id: number, tx: Prisma.TransactionClient): Promise<void>;
    findBasicTripById(id: number): Promise<{
        price_per_seat: number;
    }>;
    private decrementUserWalletByDebt;
    markPassengerAsArrived(passengerTripId: number): Promise<void>;
}
declare const basicTripService: BasicTripService;
export default basicTripService;
